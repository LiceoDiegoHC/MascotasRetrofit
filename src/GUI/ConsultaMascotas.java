package GUI;

import API.Cliente;
import API.RegistroAPI;
import Interfaces.Mascotas;
import Interfaces.Respuesta;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

/**
 *
 * @author venda
 */
public class ConsultaMascotas extends javax.swing.JFrame {

    private int filas = 0;
    private List<Mascotas> respuesta;
    private List<Respuesta> mensaje;
    
    public ConsultaMascotas() {
        initComponents();
        Consulta();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        Modificar = new javax.swing.JButton();
        Modificar1 = new javax.swing.JButton();

        jButton2.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jButton3.setText("Insertar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        tabla.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Tipo", "Edad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setRowHeight(40);
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setResizable(false);
            tabla.getColumnModel().getColumn(1).setResizable(false);
            tabla.getColumnModel().getColumn(2).setResizable(false);
            tabla.getColumnModel().getColumn(3).setResizable(false);
        }

        Modificar.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        Modificar.setText("Modificar");
        Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarActionPerformed(evt);
            }
        });

        Modificar1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        Modificar1.setText("Eliminar");
        Modificar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Modificar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Modificar1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(Modificar)
                    .addComponent(Modificar1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        NuevaMascota nm = new NuevaMascota(this, true);
        nm.setVisible(true);
        Consulta();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarActionPerformed
        SeleccionarMascota();
    }//GEN-LAST:event_ModificarActionPerformed

    private void Modificar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Modificar1ActionPerformed
        EliminarMascota();
    }//GEN-LAST:event_Modificar1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Modificar;
    private javax.swing.JButton Modificar1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    public void EliminarMascota(){
        int fila = tabla.getSelectedRow();
        if(fila < 0){
            JOptionPane.showMessageDialog(this, "Selecciona una fila");
        }else{
            Call<List<Respuesta>> call = Cliente
                .getInstance()
                .getMyApi()
                .EliminarMascota(respuesta.get(fila).getId());
            
            call.enqueue(new Callback<List<Respuesta>>(){
                @Override
                public void onResponse(Call<List<Respuesta>> call, Response<List<Respuesta>> rspns) {
                    mensaje = rspns.body();
                    if(mensaje.isEmpty()){
                        JOptionPane.showMessageDialog(null, "Sin conexion");
                    }else{
                        JOptionPane.showMessageDialog(null, mensaje.get(0).getRespuesta());
                    }
                }

                @Override
                public void onFailure(Call<List<Respuesta>> call, Throwable thrwbl) {
                    JOptionPane.showMessageDialog(null, "Error en el servicio // "+thrwbl.getMessage());
                }
            });
        
            
        }
        Consulta();
    }
    
    public void Consulta(){
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        Object nf[] = {null, null, null, null};
        for(int i = (filas -1); i >= 0; i--){
            modelo.removeRow(i);
        }
        filas = 0;
        RegistroAPI api = Cliente.getRetrofitInstance().create(RegistroAPI.class);
        Call<List<Mascotas>> call = api.ConsultarMascotas();
        call.enqueue(new Callback<List<Mascotas>>(){
            @Override
            public void onResponse(Call<List<Mascotas>> call, Response<List<Mascotas>> rspns) {
                respuesta = rspns.body();
                if(respuesta.isEmpty()){
                    JOptionPane.showMessageDialog(null, "No hay mascotas registradas");
                }else{
                    while(filas < respuesta.size()){
                        modelo.addRow(nf);
                        tabla.setValueAt(respuesta.get(filas).getId()+"", filas, 0);
                        tabla.setValueAt(respuesta.get(filas).getNombre(), filas, 1);
                        tabla.setValueAt(respuesta.get(filas).getTipo(), filas, 2);
                        tabla.setValueAt(respuesta.get(filas).getEdad()+"", filas, 3);
                        filas++;
                    }
                }
            }

            @Override
            public void onFailure(Call<List<Mascotas>> call, Throwable thrwbl) {
                JOptionPane.showMessageDialog(null, "No hay respuesta del servidor");
            }
            
        });
    }
    
    private void SeleccionarMascota(){
        if(tabla.getSelectedRow() < 0){
            JOptionPane.showMessageDialog(this, "Selecciona una fila");
        }else{
            ModificarMascota mm = new ModificarMascota(this, true);
            mm.setDatos(
                    respuesta.get(tabla.getSelectedRow()).getId(),
                    respuesta.get(tabla.getSelectedRow()).getNombre(),
                    respuesta.get(tabla.getSelectedRow()).getTipo(),
                    respuesta.get(tabla.getSelectedRow()).getEdad()
            );
            mm.setVisible(true);
            Consulta();
        }
    }
}
